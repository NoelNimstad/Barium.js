let regexTagTypes=[],regex="";const keys={},barium={tags:[],add:Function.prototype,replace:Function.prototype,initial:Function.prototype,reapply:Function.prototype,addMultiple:Function.prototype};barium.replace=function(t,e){let n=barium.tags.find(t=>t.name===e);if(!n)return console.warn("no tag exists with type "+e),[t.replace(regex,"$1"),"p"];let a=n.func(t.replace(regex,"$2"));if(!a[0]||"string"!=typeof a[0])throw Error("no valid content was returned from "+e+"'s function");if(!a[1]||"string"!=typeof a[1])throw Error("no valid tag type was returned from "+e+"'s function");return[a[0],a[1]]},barium.initial=function(){regex=RegExp(regexTagTypes.join("|"),"g");let t=document.body.innerHTML.toString(),e=0,n=t.replace(regex,t=>{let n=t.replace(/<(.*?)>(.*?)<\/(.*?)>/g,"$1"),a=barium.replace(t,n);if("object"!=typeof a||2!=a.length)throw Error("replace function didn't return a 2 long array\nreplace() returned: "+a.join(" | "));let r=`<${a[1]}>${a[0]}</${a[1]}>`;return keys[e]=[n,`<${n}>${a[0]}</${n}>`,r],e++,r});document.body.innerHTML=n},barium.reapply=function(){for(let t in keys){let e=document.body.innerHTML.toString(),n=barium.replace(keys[t][1],keys[t][0]),a=`<${n[1]}>${n[0]}</${n[1]}>`,r=keys[t][1].replace(/<(.*?)>(.*?)<\/(.*?)>/g,"$1");document.body.innerHTML=e.replace(keys[t][2],a),keys[t]=[r,`<${r}>${n[0]}</${r}>`,a]}},barium.add=function(t){if(!t.name||"string"!=typeof t.name)throw Error("inputted tag doesn't have a tag type or the tag type isn't a string");if(!t.func||"function"!=typeof t.func)throw Error("inputted tag doesn't have a tag function or the inputted tag function isn't a function");regexTagTypes.push(`(<${t.name}>(.*?)</${t.name}>)`),barium.tags.push(t)},barium.addMultiple=function(t){if(!t||"object"!=typeof t)throw Error("no tags inputted or the function input isn't an array");for(let e in t){if(!t[e].name||"string"!=typeof t[e].name)throw Error("inputted tag doesn't have a tag type or the tag type isn't a string");if(!t[e].func||"function"!=typeof t[e].func)throw Error("inputted tag doesn't have a tag function or the inputted tag function isn't a function");regexTagTypes.push(`(<${t[e].name}>(.*?)</${t[e].name}>)`),barium.tags.push(t[e])}},barium.tag=class{constructor(t,e){if("string"!=typeof t)throw Error(`tag type ${t} isn't a string`);if("function"!=typeof e)throw Error("inputed tag function isn't a function");this.name=t,this.func=e}};